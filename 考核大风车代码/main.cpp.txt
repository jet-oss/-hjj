#include"Energy.h"

//颜色模式选择
bool color_mode()
{
	cout << "请选择模式:蓝色（1），红色（2）" << endl;
	int a;
	cin >> a;
	if (a == 1)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

//输入流模式选择
bool input_mode() {
	cout << "请选择模式:图片（1），视频（2）" << endl;
	int a;
	cin >> a;
	if (a == 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

//所有处理步骤
void allprocess(ArmorDescribtor &armor,Mat &img,bool is_blue)
{	
	armor.preprocessing(img, is_blue);
	
	armor.findcontours();

	if ( armor.allcontours.size() == 1 || contourArea(armor.contours)< armor.standard*5/2)
	{
		armor.findapproach();

		//画出轮廓
		for (int i = 0; i < armor.approach_contours.size(); i++)
		{
			if (i == armor.approach_contours.size() - 1)
			{
				line(img, armor.approach_contours[0], armor.approach_contours[i], Scalar(255, 0, 255));
				break;
			}
			line(img, armor.approach_contours[i], armor.approach_contours[i+1], Scalar(255, 0, 255));
		}
		//画出中心点
		circle(img, armor.approach_center, 1, Scalar(255, 0, 255), -1);

		//提前识别出第五个轮廓
		if (armor.allcontours.size() == 4)
		{
			armor.findfifthcontours();
			
			//画出轮廓
			for (int i = 0; i < armor.find_contours.size(); i++)
			{
				if (i == armor.find_contours.size() - 1)
				{
					line(img, armor.find_contours[0], armor.find_contours[i], Scalar(0, 255, 255));
					break;
				}
				line(img, armor.find_contours[i], armor.find_contours[i + 1], Scalar(0, 255, 255));
			}
			//画出中心点
			circle(img, armor.find_center, 1, Scalar(0, 255, 255), -1);
		}
	}
}



int main()
{
	bool is_blue = color_mode();

	if (input_mode())
	{
		ArmorDescribtor armor;
		Mat img = imread("C:\\Users\\10949\\Desktop\\电脑编程\\考核\\第二次考核opencv\\wind\\红色.png");
		if (img.empty())
		{
			cout << "图片加载失败" << endl;
			return -1;
		}

		allprocess(armor, img, is_blue);

		imshow("img", img);
		waitKey();
	}
	else
	{
		VideoCapture video("C:\\Users\\10949\\Desktop\\电脑编程\\考核\\第二次考核opencv\\wind\\wind.mp4");
		if (!video.isOpened())
		{
			cout << "视频加载失败" << endl;
			return -1;
		}

		while (1)
		{
			ArmorDescribtor armor;
			Mat frame;
			video >> frame;
			if (frame.empty())
			{
				break;
			}

			allprocess(armor, frame, is_blue);

			imshow("frame", frame);
			waitKey( 1000/video.get(CAP_PROP_FPS));
		}
	}

	return 0;
}


